<%
%><%@include "includes.csp"
%><%
#include "ejudge/userlist.h"
#include "ejudge/userlist_clnt.h"
#include "ejudge/userlist_proto.h"
%><%
extern const unsigned char * const ss_reg_status_strs[];
extern const unsigned char * const ss_flag_op_legends[];
%><%@set getter_name = "csp_get_user_sel_random_passwd_page"
%><%@set ac_prefix = "SSERV_CMD_"
%><%@set err_prefix = "SSERV_ERR_"
%><%@page csp_view_user_sel_random_passwd_page(PageInterface *pg, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "stdvars.csp"
%><%
    const unsigned char *title = NULL;
    unsigned char buf[1024];
    const unsigned char *subtitle = buf;

    int contest_id = 0;
    int group_id = 0;
    unsigned char *marked_str = NULL;
    bitset_t marked = BITSET_INITIALIZER;
    int r;
    struct userlist_list *users = NULL;
    unsigned char *xml_text = NULL;
    const struct userlist_group *g = NULL;
    unsigned char *group_name = NULL;
    unsigned char *group_desc = NULL;
    int status = USERLIST_REG_REJECTED;
    int invisible_op = 0;
    int banned_op = 0;
    int locked_op = 0;
    int incomplete_op = 0;
    int disqualified_op = 0;
    int privileged_op = 0;
    int reg_readonly_op = 0;
    int other_contest_id = 0;
    const struct contest_desc *other_cnts = NULL;
    const int *cnts_id_list = NULL;
    int cnts_id_count = 0;
    int other_group_id = 0;
    struct userlist_list *groups = NULL;
    opcap_t gcaps = 0, caps = 0;
    int user_id;
    int is_set_changed = 0;
    int user_count = 0;
    const struct userlist_user *u = NULL;
    int operation = 0;
    const unsigned char *button_label = NULL;
    int serial;
    const struct userlist_contest *reg = NULL;
    const struct userlist_user_info *ui = NULL;
    int need_privileged = 0;
    int need_invisible = 0;
    int need_banned = 0;
    int need_locked = 0;
    int need_disqualified = 0;
    int need_reg_privileged = 0;
    int need_reg_readonly = 0;

    int other_user_id = 0; // needed for users_top_menu.csp

    %><s:read name="contest_id" default="0" /><%
    %><s:read name="group_id" default="0" /><%
    marked_str = ss_collect_marked_set(phr, &marked);

    if (contest_id < 0) contest_id = 0;
    if (contest_id > 0) {
        if (contests_get(contest_id, &cnts) < 0 || !cnts) contest_id = 0;
    }
    if (group_id < 0) group_id = 0;
    if (group_id > 0) {
        r = userlist_clnt_list_all_users(phr->userlist_clnt, ULS_GET_GROUP_INFO, group_id, &xml_text);
        if (r >= 0) {
            users = userlist_parse_str(xml_text);
            if (users && group_id < users->group_map_size && (g = users->group_map[group_id])) {
                group_name = xstrdup(g->group_name);
                group_desc = xstrdup(g->description);
            } else {
                group_id = 0;
            }
        } else {
            group_id = 0;
        }
        userlist_free(&users->b); users = NULL;
        xfree(xml_text); xml_text = NULL;
    }

    /* additional parameters */
    switch (phr->action) {
    case SSERV_CMD_USER_SEL_CHANGE_REG_STATUS_PAGE:
        %><s:read name="status" default="-1" /><%
        if (status < 0 || status >= USERLIST_REG_LAST) FAIL(SSERV_ERR_INV_VALUE);
        break;
    case SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_PAGE:
        %><s:read name="invisible_op" default="0" /><%
        %><s:read name="banned_op" default="0" /><%
        %><s:read name="locked_op" default="0" /><%
        %><s:read name="incomplete_op" default="0" /><%
        %><s:read name="disqualified_op" default="0" /><%
        %><s:read name="privileged_op" default="0" /><%
        %><s:read name="reg_readonly_op" default="0" /><%
        if (invisible_op < 0 || invisible_op > 3) invisible_op = 0;
        if (banned_op < 0 || banned_op > 3) banned_op = 0;
        if (locked_op < 0 || locked_op > 3) locked_op = 0;
        if (incomplete_op < 0 || incomplete_op > 3) incomplete_op = 0;
        if (disqualified_op < 0 || disqualified_op > 3) disqualified_op = 0;
        if (privileged_op < 0 || privileged_op > 3) privileged_op = 0;
        if (reg_readonly_op < 0 || reg_readonly_op > 3) reg_readonly_op = 0;
        break;
    case SSERV_CMD_USER_SEL_CREATE_REG_PAGE:
    case SSERV_CMD_USER_SEL_CREATE_REG_AND_COPY_PAGE:
        %><s:read name="other_contest_id" defaul="0" /><%
        if (other_contest_id <= 0 || contests_get(other_contest_id, &other_cnts) < 0 || !other_cnts) {
            other_contest_id = 0;
        }
        cnts_id_count = contests_get_list(&cnts_id_list);
        break;
    case SSERV_CMD_USER_SEL_CREATE_GROUP_MEMBER_PAGE:
        %><s:read name="other_group_id" defaul="0" /><%
        if (other_group_id < 0) other_group_id = 0;
        if (other_group_id > 0) {
            r = userlist_clnt_list_all_users(phr->userlist_clnt, ULS_GET_GROUP_INFO, other_group_id, &xml_text);
            if (r < 0) other_group_id = 0;
            users = userlist_parse_str(xml_text);
            if (!users || group_id >= users->group_map_size || !users->group_map[other_group_id])
                other_group_id = 0;
            userlist_free(&users->b); users = NULL;
            xfree(xml_text); xml_text = NULL;
        }
        r = userlist_clnt_list_all_users(phr->userlist_clnt, ULS_LIST_ALL_GROUPS, 0, &xml_text);
        if (r >= 0) {
            groups = userlist_parse_str(xml_text);
            xfree(xml_text); xml_text = NULL;
        }
        break;
    case SSERV_CMD_USER_SEL_DELETE_GROUP_MEMBER_PAGE:
        if (group_id <= 0) FAIL(SSERV_ERR_INV_VALUE);
        break;
    }
    (void) cnts_id_count;

    /* contest_id check and preliminary permission check */
    switch (phr->action) {
    case SSERV_CMD_USER_SEL_RANDOM_PASSWD_PAGE:
        if (ss_get_global_caps(phr, &gcaps) < 0) FAIL(SSERV_ERR_PERM_DENIED);
        if (opcaps_check(gcaps, OPCAP_EDIT_PASSWD) < 0 && opcaps_check(gcaps, OPCAP_PRIV_EDIT_PASSWD) < 0)
            FAIL(SSERV_ERR_PERM_DENIED);
        break;
    case SSERV_CMD_USER_SEL_CLEAR_CNTS_PASSWD_PAGE:
    case SSERV_CMD_USER_SEL_RANDOM_CNTS_PASSWD_PAGE:
        if (!cnts) FAIL(SSERV_ERR_INV_CONTEST);
        ss_get_global_caps(phr, &gcaps);
        ss_get_contest_caps(phr, cnts, &caps);
        caps |= gcaps;
        if (opcaps_check(caps, OPCAP_EDIT_PASSWD) < 0 && opcaps_check(caps, OPCAP_PRIV_EDIT_PASSWD) < 0)
            FAIL(SSERV_ERR_PERM_DENIED);
        break;
    case SSERV_CMD_USER_SEL_DELETE_REG_PAGE:
        if (!cnts) FAIL(SSERV_ERR_INV_CONTEST);
        ss_get_global_caps(phr, &gcaps);
        if (opcaps_check(gcaps, OPCAP_EDIT_USER) >= 0) gcaps |= 1LL << OPCAP_DELETE_REG;
        if (opcaps_check(gcaps, OPCAP_PRIV_EDIT_USER) >= 0) gcaps |= 1LL << OPCAP_PRIV_DELETE_REG;
        ss_get_contest_caps(phr, cnts, &caps);
        caps |= gcaps;
        if (opcaps_check(caps, OPCAP_PRIV_DELETE_REG) < 0 && opcaps_check(caps, OPCAP_DELETE_REG) < 0)
            FAIL(SSERV_ERR_PERM_DENIED);
        break;
    case SSERV_CMD_USER_SEL_CHANGE_REG_STATUS_PAGE:
    case SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_PAGE:
        if (!cnts) FAIL(SSERV_ERR_INV_CONTEST);
        ss_get_global_caps(phr, &gcaps);
        if (opcaps_check(gcaps, OPCAP_EDIT_USER) >= 0) gcaps |= 1LL << OPCAP_EDIT_REG;
        if (opcaps_check(gcaps, OPCAP_PRIV_EDIT_USER) >= 0) gcaps |= 1LL << OPCAP_PRIV_EDIT_REG;
        ss_get_contest_caps(phr, cnts, &caps);
        caps |= gcaps;
        if (opcaps_check(caps, OPCAP_PRIV_EDIT_REG) < 0 && opcaps_check(caps, OPCAP_EDIT_REG) < 0)
            FAIL(SSERV_ERR_PERM_DENIED);
        break;
    case SSERV_CMD_USER_SEL_CREATE_REG_PAGE:
    case SSERV_CMD_USER_SEL_CREATE_REG_AND_COPY_PAGE:
        break;
    case SSERV_CMD_USER_SEL_CREATE_GROUP_MEMBER_PAGE:
    case SSERV_CMD_USER_SEL_DELETE_GROUP_MEMBER_PAGE:
        if (ss_get_global_caps(phr, &gcaps) < 0) FAIL(SSERV_ERR_PERM_DENIED);
        if (opcaps_check(gcaps, OPCAP_EDIT_USER) < 0)
            FAIL(SSERV_ERR_PERM_DENIED);
        break;
    default:
        abort();
    }

    if (!phr->userlist_clnt) FAIL(SSERV_ERR_DB_ERROR);
    r = userlist_clnt_list_users_2(phr->userlist_clnt, ULS_LIST_ALL_USERS_3,
                                   contest_id, group_id, marked_str, 0, 0,
                                   // FIXME: fill these fields
                                   -1 /* page */, -1 /* sort_field */, 0 /* sort_order */,
                                   -1 /* filter_field */, 0 /* filter_op */,
                                   &xml_text);
    if (r < 0) FAIL(SSERV_ERR_DB_ERROR);
    users = userlist_parse_str(xml_text);
    if (!users) FAIL(SSERV_ERR_DB_ERROR);

    for (user_id = 1; user_id < marked.size; ++user_id) {
        if (bitset_get(&marked, user_id)) {
            if (user_id >= users->user_map_size || !(u = users->user_map[user_id])) {
                bitset_off(&marked, user_id);
                is_set_changed = 1;
                continue;
            }
            if (contest_id > 0 && !userlist_get_user_contest(u, contest_id)) {
                bitset_off(&marked, user_id);
                is_set_changed = 1;
                continue;
            }
            /* per-user check */
            switch (phr->action) {
            case SSERV_CMD_USER_SEL_RANDOM_PASSWD_PAGE:
                if (ss_is_privileged(phr, cnts, u)) {
                    if (opcaps_check(gcaps, OPCAP_PRIV_EDIT_PASSWD) < 0) u = 0;
                } else {
                    if (opcaps_check(gcaps, OPCAP_EDIT_PASSWD) < 0) u = 0;
                }
                break;
            case SSERV_CMD_USER_SEL_CLEAR_CNTS_PASSWD_PAGE:
            case SSERV_CMD_USER_SEL_RANDOM_CNTS_PASSWD_PAGE:
                if (ss_is_globally_privileged(phr, u)) {
                    if (opcaps_check(gcaps, OPCAP_PRIV_EDIT_PASSWD) < 0) u = 0;
                } else if (ss_is_contest_privileged(cnts, u)) {
                    if (opcaps_check(caps, OPCAP_PRIV_EDIT_PASSWD) < 0) u = 0;
                } else {
                    if (opcaps_check(caps, OPCAP_EDIT_PASSWD) < 0) u = 0;
                }
                break;
            case SSERV_CMD_USER_SEL_DELETE_REG_PAGE:
                if (ss_is_globally_privileged(phr, u)) {
                    if (opcaps_check(gcaps, OPCAP_PRIV_DELETE_REG) < 0) u = 0;
                } else if (ss_is_contest_privileged(cnts, u)) {
                    if (opcaps_check(caps, OPCAP_PRIV_DELETE_REG) < 0) u = 0;
                } else {
                    if (opcaps_check(caps, OPCAP_DELETE_REG) < 0) u = 0;
                }
                break;
            case SSERV_CMD_USER_SEL_CHANGE_REG_STATUS_PAGE:
            case SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_PAGE:
                if (ss_is_globally_privileged(phr, u)) {
                    if (opcaps_check(gcaps, OPCAP_PRIV_EDIT_REG) < 0) u = 0;
                } else if (ss_is_contest_privileged(cnts, u)) {
                    if (opcaps_check(caps, OPCAP_PRIV_EDIT_REG) < 0) u = 0;
                } else {
                    if (opcaps_check(caps, OPCAP_EDIT_REG) < 0) u = 0;
                }
                break;
            case SSERV_CMD_USER_SEL_CREATE_REG_PAGE:
            case SSERV_CMD_USER_SEL_CREATE_REG_AND_COPY_PAGE:
                break;
            case SSERV_CMD_USER_SEL_CREATE_GROUP_MEMBER_PAGE:
            case SSERV_CMD_USER_SEL_DELETE_GROUP_MEMBER_PAGE:
                break;
            default:
                abort();
            }
            if (!u) {
                bitset_off(&marked, user_id);
                is_set_changed = 1;
                continue;
            }
            ++user_count;
        }
    }
    if (user_count <= 0) {
        %><s:redirect ac="user-browse-page" /><%
        //ss_redirect_2(out_f, phr, SSERV_CMD_USER_BROWSE_PAGE, contest_id, group_id, 0, NULL);
        goto cleanup;
    }
    if (is_set_changed) {
        xfree(marked_str);
        marked_str = bitset_url_encode(&marked);
    }

    /* page header generation */
    switch (phr->action) {
    case SSERV_CMD_USER_SEL_RANDOM_PASSWD_PAGE:
        snprintf(buf, sizeof(buf), "Generate random registration passwords");
        break;
    case SSERV_CMD_USER_SEL_CLEAR_CNTS_PASSWD_PAGE:
        snprintf(buf, sizeof(buf), "Clear contest passwords for contest %d", contest_id);
        break;
    case SSERV_CMD_USER_SEL_RANDOM_CNTS_PASSWD_PAGE:
        snprintf(buf, sizeof(buf), "Generate random contest passwords for contest %d", contest_id);
        break;
    case SSERV_CMD_USER_SEL_DELETE_REG_PAGE:
        snprintf(buf, sizeof(buf), "Delete registrations from contest %d", contest_id);
        break;
    case SSERV_CMD_USER_SEL_CHANGE_REG_STATUS_PAGE:
        snprintf(buf, sizeof(buf), "Change registration statuses in contest %d", contest_id);
        break;
    case SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_PAGE:
        if (!(invisible_op + banned_op + locked_op + incomplete_op + disqualified_op + privileged_op + reg_readonly_op)) {
            %><s:redirect ac="user-browse-page" /><%
            //ss_redirect_2(out_f, phr, SSERV_CMD_USER_BROWSE_PAGE, contest_id, group_id, 0, marked_str);
            goto cleanup;
        }
        snprintf(buf, sizeof(buf), "Change registration flags in contest %d", contest_id);
        break;
    case SSERV_CMD_USER_SEL_CREATE_REG_PAGE:
        snprintf(buf, sizeof(buf), "Register users for another contest");
        break;
    case SSERV_CMD_USER_SEL_CREATE_REG_AND_COPY_PAGE:
        snprintf(buf, sizeof(buf), "Register users for another contest and copy data");
        break;
    case SSERV_CMD_USER_SEL_CREATE_GROUP_MEMBER_PAGE:
        snprintf(buf, sizeof(buf), "Add users to a group");
        break;
    case SSERV_CMD_USER_SEL_DELETE_GROUP_MEMBER_PAGE:
        snprintf(buf, sizeof(buf), "Remove users from group %d", group_id);
        break;
    default:
        abort();
    }

%><%@include "header.csp"
%>

<h2><s:v value="subtitle" /></h2>

<%@include "users_top_menu.csp"
%>

<script language="javascript">
function updateCnts1()
{
    var obj1 = document.getElementById("cnts1");
    var obj2 = document.getElementById("cnts2");
    var value = obj1.value;
    var i;
    for (i = 0; i < obj2.options.length; ++i) {
        if (obj2.options[i].value == value) {
            obj2.options.selectedIndex = i;
            break;
        }
    }
}

function updateCnts2()
{
    var obj1 = document.getElementById("cnts1");
    var obj2 = document.getElementById("cnts2");
    var value = obj2.options[obj2.selectedIndex].value;
    obj1.value = value;
}

function updateGroup1()
{
    var obj1 = document.getElementById("group1");
    var obj2 = document.getElementById("group2");
    var value = obj1.value;
    var i;
    for (i = 0; i < obj2.options.length; ++i) {
        if (obj2.options[i].value == value) {
            obj2.options.selectedIndex = i;
            break;
        }
    }
}

function updateGroup2()
{
    var obj1 = document.getElementById("group1");
    var obj2 = document.getElementById("group2");
    var value = obj2.options[obj2.selectedIndex].value;
    obj1.value = value;
}
</script>

<%
    /* additional info */
    switch (phr->action) {
    case SSERV_CMD_USER_SEL_CLEAR_CNTS_PASSWD_PAGE:
    case SSERV_CMD_USER_SEL_RANDOM_CNTS_PASSWD_PAGE:
    case SSERV_CMD_USER_SEL_DELETE_REG_PAGE:
    case SSERV_CMD_USER_SEL_CHANGE_REG_STATUS_PAGE:
    case SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_PAGE:
%><h2><s:v value="cnts->name" checkExpr="" /></h2><%
        break;
    case SSERV_CMD_USER_SEL_DELETE_GROUP_MEMBER_PAGE:
%><h2>Group: <s:v value="group_name" checkExpr="" /></h2><%
        break;
    }
%>

<s:form>
  <s:hidden name="contest_id" checkExpr="> 0" />
  <s:hidden name="group_id" checkExpr="> 0" />
  <s:hidden name="marked" value="marked_str" fullCheckExpr="marked_str && *marked_str" />

<%
    /* additional info */
    switch (phr->action) {
    case SSERV_CMD_USER_SEL_RANDOM_PASSWD_PAGE:
%><p>The registration passwords are to be regenerated for the following <s:v value="user_count" /> users:</p><%
        operation = SSERV_CMD_USER_SEL_RANDOM_PASSWD_ACTION;
        button_label = "Generate passwords!";
        break;
    case SSERV_CMD_USER_SEL_CLEAR_CNTS_PASSWD_PAGE:
%><p>The contest passwords are to be cleared for the following <s:v value="user_count" /> users:</p><%
        operation = SSERV_CMD_USER_SEL_CLEAR_CNTS_PASSWD_ACTION;
        button_label = "Clear contest passwords!";
        break;
    case SSERV_CMD_USER_SEL_RANDOM_CNTS_PASSWD_PAGE:
%><p>The contest passwords are to be regenerated for the following <s:v value="user_count" /> users:</p><%
        operation = SSERV_CMD_USER_SEL_RANDOM_CNTS_PASSWD_ACTION;
        button_label = "Generate contest passwords!";
        break;
    case SSERV_CMD_USER_SEL_DELETE_REG_PAGE:
%><p>The registrations are to be deleted for the following <s:v value="user_count" /> users:</p><%
        operation = SSERV_CMD_USER_SEL_DELETE_REG_ACTION;
        button_label = "Delete registrations!";
        break;
    case SSERV_CMD_USER_SEL_CHANGE_REG_STATUS_PAGE:
%><s:hidden name="status" checkExpr=" >= 0" /><%
%><p>The registration status is to be changed to <s:v value="ss_reg_status_strs[status]" escape="no" /> for the following <s:v value="user_count" /> users:</p><%
        operation = SSERV_CMD_USER_SEL_CHANGE_REG_STATUS_ACTION;
        button_label = "Change!";
        break;
    case SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_PAGE:
%>
  <s:hidden name="invisible_op" />
  <s:hidden name="banned_op" />
  <s:hidden name="locked_op" />
  <s:hidden name="incomplete_op" />
  <s:hidden name="disqualified_op" />
  <s:hidden name="privileged_op" />
  <s:hidden name="reg_readonly_op" />

  <p>The registration flags are to be changed for the following <s:v value="user_count" /> users as follows:</p>
  <table class="b0">
<%
        if (invisible_op > 0) {
%>
    <tr><td class="b0"><b>Invisible:</b></td><td class="b0"><s:v value="ss_flag_op_legends[invisible_op]" escape="no" /></td></tr>
<%
        }
        if (banned_op > 0) {
%>
    <tr><td class="b0"><b>Banned:</b></td><td class="b0"><s:v value="ss_flag_op_legends[banned_op]" escape="no" /></td></tr>
<%
        }
        if (locked_op > 0) {
%>
    <tr><td class="b0"><b>Locked:</b></td><td class="b0"><s:v value="ss_flag_op_legends[locked_op]" escape="no" /></td></tr>
<%
        }
        if (incomplete_op > 0) {
%>
    <tr><td class="b0"><b>Incomplete:</b></td><td class="b0"><s:v value="ss_flag_op_legends[incomplete_op]" escape="no" /></td></tr>
<%
        }
        if (disqualified_op > 0) {
%>
    <tr><td class="b0"><b>Disqualified:</b></td><td class="b0"><s:v value="ss_flag_op_legends[disqualified_op]" escape="no" /></td></tr>
<%
        }
        if (privileged_op > 0) {
%>
    <tr><td class="b0"><b>Privileged:</b></td><td class="b0"><s:v value="ss_flag_op_legends[privileged_op]" escape="no" /></td></tr>
<%
        }
        if (reg_readonly_op > 0) {
%>
    <tr><td class="b0"><b>Reg. read-only:</b></td><td class="b0"><s:v value="ss_flag_op_legends[reg_readonly_op]" escape="no" /></td></tr>
<%
        }
%>
  </table>
<%
        operation = SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_ACTION;
        button_label = "Change!";
        break;
    case SSERV_CMD_USER_SEL_CREATE_REG_PAGE:
    case SSERV_CMD_USER_SEL_CREATE_REG_AND_COPY_PAGE:
%>
  <table class="b0">
    <tr>
      <td class="b0"><b>Contest ID:</b></td>
      <td class="b0"><s:textfield id="cnts1" onchange="updateCnts1()" name="other_contest_id_1" size="20" value="other_contest_id" checkExpr="> 0" /></td>
    </tr>
    <tr>
      <td class="b0"><b>Contest name:</b></td>
      <td class="b0">
        <select id="cnts2" onchange="updateCnts2()" name="other_contest_id_2">
          <option value="0"></option>
<%
        for (int i = 0; i < cnts_id_count; ++i) {
            int other_contest_id_2 = cnts_id_list[i];
            if (other_contest_id_2 <= 0) continue;
            if (contests_get(other_contest_id_2, &cnts) < 0 || !cnts) continue;
            if (cnts->closed) continue;
%>
          <s:option value="other_contest_id_2" selectedExpr="other_contest_id_2 == other_contest_id"><s:v value="cnts->name" checkExpr=""/></s:option>
<%
        }
%>
        </select>
      </td>
    </tr>
  </table>
<%
        switch (phr->action) {
        case SSERV_CMD_USER_SEL_CREATE_REG_PAGE:
            operation = SSERV_CMD_USER_SEL_CREATE_REG_ACTION;
            button_label = "Register!";
            break;
        case SSERV_CMD_USER_SEL_CREATE_REG_AND_COPY_PAGE:
            operation = SSERV_CMD_USER_SEL_CREATE_REG_AND_COPY_ACTION;
            button_label = "Register and copy!";
            break;
        }
        break;
    case SSERV_CMD_USER_SEL_CREATE_GROUP_MEMBER_PAGE:
%>
  <table class="b0">
    <tr>
      <td class="b0"><b>Group ID:</b></td>
      <td class="b0"><s:textfield id="group1" onchange="updateGroup1()" name="other_group_id_1" size="20" value="other_group_id" checkExpr=" > 0" /></td>
    </tr>
    <tr>
      <td class="b0"><b>Group name:</b></td>
      <td class="b0">
        <select id="group2" onchange="updateGroup2()" name="other_group_id_2">
          <option value="0"></option>
<%
        if (groups) {
            int i;
            for (i = 0; i < groups->group_map_size; ++i) {
                if (!(g = groups->group_map[i])) continue;
%>
          <s:option value="i" selectedExpr="i == other_group_id"><s:v value="g->group_name" checkExpr="" /></s:option>
<%
            }
        }
%>
        </select>");
      </td>
    </tr>
  </table>
<%
        operation = SSERV_CMD_USER_SEL_CREATE_GROUP_MEMBER_ACTION;
        button_label = "Add to group";
        break;
    case SSERV_CMD_USER_SEL_DELETE_GROUP_MEMBER_PAGE:
%><p>The following users are to be removed from group <s:v value="group_id" />:</p><%
        operation = SSERV_CMD_USER_SEL_DELETE_GROUP_MEMBER_ACTION;
        button_label = "Remove from group";
        break;
    default:
        abort();
    }
    (void) operation;
    (void) button_label;
%>

  <table class="b1">
    <tr>
      <th class="b1">NN</th>
      <th class="b1">User ID</th>
      <th class="b1">Login</th>
      <th class="b1">Name</th>
      <th class="b1">Status</th>
      <th class="b1">Flags</th>
    </tr>
<%
    for (user_id = 1, serial = 0; user_id < marked.size; ++user_id) {
        if (bitset_get(&marked, user_id)) {
            u = users->user_map[user_id];
            ui = u->cnts0;
            reg = 0;
            if (contest_id > 0) {
                reg = userlist_get_user_contest(u, contest_id);
            }
%>
    <tr>
      <td class="b1"><s:v value="++serial" /></td>
      <td class="b1"><s:v value="user_id" /></td>
      <td class="b1"><s:v value="u->login" checkExpr="" /></td>
      <td class="b1"><% if (ui && ui->name && *ui->name) { %><s:v value="ui->name" /><% } else { %><s:v value="u->login" checkExpr="" /><% } %></td>
<%
            if (cnts && reg) {
                r = reg->status;
                if (r < 0 || r >= USERLIST_REG_LAST) r = USERLIST_REG_LAST;
%>
      <td class="b1"><s:v value="ss_reg_status_strs[r]" escape="no" /></td>
<%
            } else {
%>
      <td class="b1">&nbsp;</td>
<%
            }
%>
      <td class="b1"><%
            r = 0;
            if (ss_is_privileged(phr, cnts, u)) {
                need_privileged = 1;
%><% if (r++) { %>, <% } %>privileged<%
            }
            if (cnts && reg) {
                if ((reg->flags & USERLIST_UC_INVISIBLE)) {
                    need_invisible = 1;
%><% if (r++) { %>, <% } %>invisible<%
                }
                if ((reg->flags & USERLIST_UC_BANNED)) {
                    need_banned = 1;
%><% if (r++) { %>, <% } %>banned<%
                }
                if ((reg->flags & USERLIST_UC_LOCKED)) {
                    need_locked = 1;
%><% if (r++) { %>, <% } %>locked<%
                }
                if ((reg->flags & USERLIST_UC_DISQUALIFIED)) {
                    need_disqualified = 1;
%><% if (r++) { %>, <% } %>disqualified<%
                }
                if ((reg->flags & USERLIST_UC_PRIVILEGED)) {
                    need_reg_privileged = 1;
%><% if (r++) { %>, <% } %>privileged<%
                }
                if ((reg->flags & USERLIST_UC_REG_READONLY)) {
                    need_reg_readonly = 1;
%><% if (r++) { %>, <% } %>reg_readonly<%
                }
            }
            if (!r) {
%>&nbsp;<%
            }
%></td>
    </tr>
<%
        }
    }
%>
  </table>

<%
    if (phr->action != SSERV_CMD_USER_SEL_CHANGE_REG_FLAGS_PAGE) {
%>
  <table class="b0">
<%
        if (need_privileged) {
%>
    <tr>
      <td class="b0"><input type="checkbox" name="include_privileged" value="1" /></td>
      <td class="b0">Perform the operation even for PRIVILEGED users</td>
    </tr>
<%
        }
        if (need_invisible) {
%>
    <tr>
      <td class="b0"><input type="checkbox" name="include_invisible" value="1" /></td>
      <td class="b0">Perform the operation even for INVISIBLE users</td>
    </tr>
<%
        }
        if (need_banned) {
%>
    <tr>
      <td class="b0"><input type="checkbox" name="include_banned" value="1" /></td>
      <td class="b0">Perform the operation even for BANNED users</td>
    </tr>
<%
        }
        if (need_locked) {
%>
    <tr>
      <td class="b0"><input type="checkbox" name="include_locked" value="1" /></td>
      <td class="b0">Perform the operation even for LOCKED users</td>
    </tr>
<%
        }
        if (need_disqualified) {
%>
    <tr>
      <td class="b0"><input type="checkbox" name="include_disqualified" value="1" /></td>
      <td class="b0">Perform the operation even for DISQUALIFIED users</td>
    </tr>
<%
        }
        if (need_reg_privileged) {
%>
    <tr>
      <td class="b0"><input type="checkbox" name="include_reg_privileged" value="1" /></td>
      <td class="b0">Perform the operation even for PRIVILEGED (flags) users</td>
    </tr>
<%
        }
        if (need_reg_readonly) {
%>
    <tr>
      <td class="b0"><input type="checkbox" name="include_reg_readonly" value="1" /></td>
      <td class="b0">Perform the operation even for REG. READONLY users</td>
    </tr>
<%
        }
%>
  </table>
<%
    }
%>

  <table class="b0">
    <tr>
      <td class="b0"><s:submit ac="user-sel-cancel-action" text="Cancel" /></td>
      <td class="b0"><input type="submit" name="action_<s:v value="operation" />" value="<s:v value="button_label" />" /></td>
    </tr>
  </table>

</s:form>

<%@include "footer.csp"
%><%
cleanup:
    l10n_resetlocale();
    html_armor_free(&ab);
    bitset_free(&marked);
    xfree(marked_str);
    userlist_free(&users->b);
    xfree(xml_text);
    xfree(group_name);
    xfree(group_desc);
    userlist_free(&groups->b);
%>
