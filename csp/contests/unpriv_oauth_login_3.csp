<%
%><%@include "unpriv_includes.csp"
%><%
#include "ejudge/ejudge_cfg.h"
#include "ejudge/oauth.h"
#include "ejudge/userlist_clnt.h"
#include "ejudge/userlist_proto.h"
%><%@set ac_prefix = "NEW_SRV_ACTION_"
%><%@set err_prefix = "NEW_SRV_ERR_"
%><%@set getter_name = "csp_get_unpriv_oauth_login_3"
%><%@page csp_view_unpriv_oauth_login_3(PageInterface *ps, FILE *log_f, FILE *out_f, struct http_request_info *phr)
%><%@include "unpriv_stdvars.csp"
%><%
  const unsigned char *provider = NULL;
  const unsigned char *request_id = NULL;
  struct OAuthLoginResult oauth_res = {};
%><s:read var="provider" ignoreerrors="yes" /><%
%><s:read var="request_id" ignoreerrors="yes" /><%

  if (!provider || !*provider) {
    FAIL(NEW_SRV_ERR_INV_PARAM);
  }
  if (!request_id || !*request_id) {
    FAIL(NEW_SRV_ERR_INV_PARAM);
  }

  oauth_res = oauth_get_result(phr->config, provider, request_id);
  if (oauth_res.status == 0 || oauth_res.status == 1) {
    %><html><head><meta http-equiv="Refresh" content="1" /></head><body><p>waiting...</p></body></html><%
    goto cleanup;
  }

  if (oauth_res.status == 2) {
    fprintf(log_f, "request failed with error: %s\n", oauth_res.error_message);
    FAIL(NEW_SRV_ERR_PERMISSION_DENIED);
  }

  phr->contest_id = oauth_res.contest_id;
  if (phr->contest_id <= 0 || contests_get(phr->contest_id, &cnts) < 0 || !cnts) {
    FAIL(NEW_SRV_ERR_INV_CONTEST_ID);
  }


%><s:url name="Login3Url" ac="oauth-login-3" ><s:param name="request_id" value="request_id" /><s:param name="provider" value="provider" /></s:url><s:redirect url="Login3Url" /><%
cleanup:;
  oauth_free_result(&oauth_res);
  html_armor_free(&ab);
%>
